from canari.xmltools.oxml import (
    MaltegoElement,
    fields as fields_
)


class Input(MaltegoElement):
    """Elements for UIInputRequirements

    Input of type 'string' with an empty or non-existing defaultvalue will act
    as a popup, when they are non-optional.

    """

    name = fields_.String(attrname='Name')
    type = fields_.String(attrname='Type') # 'int' or 'string'
    display = fields_.String(attrname='Display')
    defaultvalue = fields_.String(attrname='DefaultValue', required=False)
    optional = fields_.Boolean(attrname='Optional', default=False)

    def __init__(self, **kwargs):
        self.name = kwargs['name']
        self.type = kwargs['type']
        self.display = kwargs['display']

        attr = kwargs.get('defaultvalue', None)
        if attr is not None: self.defaultvalue = attr

        attr = kwargs.get('optional', None)
        if attr is not None: self.optional = attr


class Transform(MaltegoElement):
    owner = fields_.String(attrname='owner')
    author = fields_.String(attrname='Author')
    version = fields_.String(attrname='Version') # Required field, though Paterva TDS lists it as optional
    maxinput = fields_.Integer(attrname='MaxEntityInputCount')
    maxoutput = fields_.Integer(attrname='MaxEntityOutputCount')
    locationrelevance = fields_.String(attrname='LocationRelevance')
    description = fields_.String(attrname='Description', required=False)
    disclaimer = fields_.String(attrname='Disclaimer', required=False)
    displayname = fields_.String(attrname='UIDisplayName')
    transformname = fields_.String(attrname='TransformName')
    inputrequirements = fields_.List(Input, tagname='UIInputRequirements')
    outputentities = fields_.List(fields_.String(tagname='OutputEntity'),
                                  tagname='OutputEntities')
    inputentity = fields_.String(tagname='InputEntity')

    def __init__(self, transform=None, **kwargs):
        if transform:
            # - Mandatory fields have no error handling.
            # - Optional fields test whether the attribute exists.

            self.owner = transform.dotransform.owner
            self.author = transform.__author__ # TODO: Add maintainer info and email.
            self.version = transform.__version__
            self.maxinput = 0
            self.maxoutput = 0
            self.locationrelevance = 'global'
            self.displayname = transform.dotransform.label

            attr = getattr(transform.dotransform, 'description', None)
            if attr is not None: self.description = attr

            attr = getattr(transform.dotransform, 'disclaimer', None)
            if attr is not None: self.disclaimer = attr

            self.transformname = transform.dotransform.uuids[0] # TODO: Handle multiple input methods.
            self.inputentity = transform.dotransform.inputs[0][1].__name__ # TODO: FIX
            self.outputentities = getattr(transform.dotransform, 'outputentities', ['Any'])

            attr = getattr(transform.dotransform, 'inputrequirements', None)
            if attr is not None:
                for elem in attr: self.appendelement(Input(**elem))


        super(Transform, self).__init__(**kwargs)

    def appendelement(self, other):
        if isinstance(other, Input):
            self.inputrequirements.append(other)

    def removeelement(self, other):
        if isinstance(other, Input):
            self.inputrequirements.remove(other)


TODO: (deliberatley added this syntax error)
    - Document how this OAuth stuff works
          - http://oauthbible.com/
          - http://www.cocoanetics.com/2014/07/understanding-oauth-1-0a/
          - http://oauth.net/core/1.0a/#anchor9
    - Test it


class OAuthAuthenticator(MaltegoElement):
    """OAuth v1.0a and v2.0 implementation.

    The Maltego client implement v1.0a and v2.0 of the OAuth model through the
    scribe-java package (https://github.com/fernandezpablo85/scribe-java).  The
    default Paterva servers shows a demo of how to use v1.0a against Twitter.

    NOTE: There are some specific behaviour for the different OAuth versions:

    - v1.0a:
        See:
            * http://www.cocoanetics.com/2014/07/understanding-oauth-1-0a/
            * http://oauthbible.com/

        The following placeholders (including '{' and '}') will be replaced in
        the authorization url:
            * {token}

        Authenticating with OAuth 1.0a:
            * OAuth authentication is the process in which Users grant access to
              their Protected Resources without sharing their credentials with
              the Consumer. OAuth uses Tokens generated by the Service Provider
              instead of the User's credentials in Protected Resources
              requests. The process uses two Token types:


Request Token:
Used by the Consumer to ask the User to authorize access to the Protected Resources. The User-authorized Request Token is exchanged for an Access Token, MUST only be used once, and MUST NOT be used for any other purpose. It is RECOMMENDED that Request Tokens have a limited lifetime.
Access Token:
Used by the Consumer to access the Protected Resources on behalf of the User. Access Tokens MAY limit access to certain Protected Resources, and MAY have a limited lifetime. Service Providers SHOULD allow Users to revoke Access Tokens. Only the Access Token SHALL be used to access the Protect Resources.


    - v2.0:
        * The following placeholders (including '{' and '}') will be replaced in
          the authorization url:
            * {apiKey}
            * {callback}



    Example of the Maltego twitter authenticator, served by the Paterva CommercialTAS31 server.

      <Authenticators>
         <OAuthAuthenticators>
            <OAuthAuthenticator Name="paterva.oauth.twitter" DisplayName="Twitter (Paterva)">
               <Description>Sign in to Twitter by authenticating against the Paterva Twitter app</Description>
               <OAuthVersion>1.0a</OAuthVersion>
               <AccessTokenEndpoint>https://api.twitter.com/oauth/access_token</AccessTokenEndpoint>
               <RequestTokenEndpoint>https://api.twitter.com/oauth/request_token</RequestTokenEndpoint>
               <AuthorizationUrl>https://api.twitter.com/oauth/authorize?oauth_token={token}</AuthorizationUrl>
               <AppKey>UJcfz5YLrifhIppMpzCfuQ</AppKey>
               <AppSecret>pC8YbA6kseSdVlVEsgTxDgNn2K0ms0Iu6SPC7Axk</AppSecret>
               <Icon>iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAB3RJTUUH3gISCTAmZqqTCgAAAAlwSFlzAAAuIgAALiIBquLdkgAAAARnQU1BAACxjwv8YQUAAAGfSURBVHjazVFNKERxEJ/5v/dskdbHRZQDtiUODi7cuIkjz/paR3KSkqOclVw5oLyW1sWBchBHBw4ShXy2+crHSWz73s6YXbWRt1m5mJqZ1//9Zub3mwH4oyGMsQr4j4qWuqpu3ACt09fZBXlvE8zYLWgDGFZRGcNMdhVB/EX1Vp83GMrY7A2flbo1yPdG52TOICJ4ESBbsskUiwDwODIqBXEsREQ/EuwEQydtn4uD4eMSAbZ/oy0msUahpmNf+KKIiC7lyZP8y7BLDLOs4aZCykXCHTdmhNhvmWUzuh1jj6bDFAOPIKASnXVKHFheSNphmu2R85RIupYVL0ZWo+CC/KCaztRxMi6Yvm3hvfGb0zHzrdVRfphskAiO82oK43kGsDM8/rzQ41QD23iJCtcmcSOD6c+O40ymhCTCstnwJvtqkbXt/1AsU3lgsbvy8UuDhFmBioMoZjUKZC1NMTHC0ELAt/xFTU/otEnk1IumWpHQLDnHpfiKFQ9Ypm/92y2szvIt0tSefEcZ8U7AMXFbmERE0goTBh/uye9W/D/sHTVlrdbRm1WYAAAAAElFTkSuQmCC</Icon>
               <AccessTokenInput>maltego.web.api.key.twitter</AccessTokenInput>
               <AccessTokenPublicKey>MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAuq8op6hKuXe9+2gkkxcIq2BaJVGNNa0Smee4Xm2D1waf8UfXFYuQRoK9d28Rto1ER1i4WpDbnimPve/aHc26NeDekMzrs1sA7+wSmL5jUOLerMLB6lAp9+oHC7suFwvDZ6ma8qljxMnx5FwtrUKEPkxwvAe4MAadPmGg9gyJh5Xs/n3sF56FHJr6k1lMmoCGLY/bwq8nidsmi+9Oz2SgfceI8Av40NCqLBlwdvwdydJUiyhqg/36Zr0/Ukg4CUzZtdw3G3xRHmBpG8UskCmgGEyKZc205C3o6CN2drBNx2D79A0GtqL47naND/unRrXAPD3097r6JQWp7oOYytYnIQIDAQAB</AccessTokenPublicKey>
            </OAuthAuthenticator>
         </OAuthAuthenticators>
      </Authenticators>

    """
    # Strict = False

    class OAuthVersion(MaltegoElement):
        """XML element describing OAuth version.

        """

        value = fields_.String(tagname=".")

        def __init__(self, version):
            self.value = version

    # Maltego supported versions of OAuth.  Static instances of the supported
    # versions. Needs to be defined this way due to python scoping 'quirks'.
    # The class must be defined before we can reference it.
    OAuthVersion.V1a = OAuthVersion("1.0a")
    OAuthVersion.V2 = OAuthVersion("2.0")


    # Element @Attribute's
    name = fields_.String(attrname='Name')
    displayname = fields_.String(attrname='DisplayName')


    # Containing elements
    description = fields_.String(
        tagname='Description',
        required=False,
    )
    version = fields_.Model(OAuthVersion)
    callbackport = fields_.Integer(
        tagname='CallbackPort',
        required=False,
    )
    accesstokenendpoint = fields_.String(
        tagname='AccessTokenEndpoint'
    )
    requesttokenendpoint = fields_.String(
        tagname='RequestTokenEndpoint',
        required=False
    )
    # Note that for v1.0a the url may contain the placeholder {token} and for
    # v2.0 it may contain the placeholders {apiKey} and {callback}.
    authorizationurl = fields_.String(
        tagname='AuthorizationUrl'
    )
    appkey = fields_.String(tagname='AppKey')
    appsecret = fields_.String(tagname='AppSecret')
    icon = fields_.String(tagname='Icon')
    accesstokeninput = fields_.String(
        tagname='AccessTokenInput'
    )
    accesstokenpublickey = fields_.String(
        tagname='AccessTokenPublicKey'
    )



class Authenticators(MaltegoElement):
    """Lists of the various authenticators

    """

    # Containing elements
    oauth = fields_.List(
        OAuthAuthenticator, tagname='OAuthAuthenticators',
        required=False
    )

    def appendelement(self, other):
        if isinstance(other, OAuthAuthenticator):
            self.oauth.append(other)

    def removeelement(self, other):
        if isinstance(other, OAuthAuthenticator):
            self.oauth.remove(other)


class MaltegoTransformListMessage(MaltegoElement):
    # Strict = False

    # Containing elements
    transforms = fields_.List(
        Transform, tagname='Transforms',
        required=False
    )

    authenticators = fields_.Model(Authenticators,
        required=False
    )

    def appendelement(self, other):
        if isinstance(other, Transform):
            self.transforms.append(other)

    def removeelement(self, other):
        if isinstance(other, Transform):
            self.transforms.remove(other)
